#!/usr/bin/env node
'use strict';
global.__started_at = new Date;

let program = require('commander');
let glob = require('glob');
let testsLocation = 'tests/**/*Test.js';
let path = require('path');
let jsdom = require('jsdom-light').jsdom;
let petrol = {};
let registeredCommands = [
    'make:test',
    'make:vue',
];

program
    .version('1.0.1')
    .command('make:test [name]', 'Generates a test file')
    .command('make:vue [name]', 'Generates a vue test file')
    .arguments('<path>')
    .option('-f, --stop-on-failure', 'Stop execution upon first error or failure.')
    .action((command, options) => {
        if (registeredCommands.includes(command)) {
            new require(`../commands/${command.replace(/:/, '-')}.js`).run(options.rawArgs);
            process.exit();
        }
        testsLocation = command.endsWith('/') ? `${command}**/*Test.js` : command;
    })
    .parse(process.argv);

new Promise((resolve, reject) => {
    petrol.filter = testsLocation.split(':')[1];

    glob(testsLocation.split(':')[0], {absolute: true}, (errors, files) => {
        if (errors) {
            return reject(errors);
        }

        return resolve(files);
    });
}).then((files) => {
    console.log(`Petrol Javascript Testing Framework\n`);
    console.log(`Preparing files...`);

    petrol.files = files;
    petrol.stopOnFailure = program.stopOnFailure;
    global.petrol = petrol;
    global.document = jsdom('<html><head></head><body></body></html>');
    global.window = global.document.defaultView;

    require('source-map-support').install({
        environment: 'node',
        handleUncaughtExceptions: false,
        hookRequire: true
    });

    const moduleAlias = require('module-alias');
    const hooks = require('require-extension-hooks');

    moduleAlias.addAlias('vue', 'vue/dist/vue.min');
    hooks('vue').plugin('vue').push();
    hooks(['vue', 'js']).plugin(path.resolve(__dirname, '../libs/require-extension-hooks-babel.js')).push();

    var Jasmine = require('jasmine');
    var jasmine = new Jasmine();

    jasmine.env.clearReporters();
    jasmine.addReporter(require('../console-reporter.js'));
    jasmine.execute([path.resolve(__dirname, '../start.js')]);

}).catch((failures) => {
    console.log(failures);
})
